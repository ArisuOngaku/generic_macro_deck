<div id="keyboard"></div>

<style>
    body {
        text-align: center;
    }

    #keyboard {
        display: grid;
        flex-wrap: wrap;
        justify-content: center;
        align-items: center;
    }

    .key {
        position: relative;
        width: 64px;
        height: 64px;
        margin: 8px;
        background-color: var(--primary);
        line-height: 64px;
        border-radius: 5px;
        transition: background-color 1s;

        box-sizing: border-box;

        user-select: none;
    }

    .key::before {
        content: "";
        display: block;
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        border-radius: 5px;
        background-color: #fff4;
    }

    .key.action {
        background-color: forestgreen;
    }

    .key.drag {
        opacity: 0.4;
    }

    .key.dragover {
        border: 1px dashed white;
    }

    .key.pressed {
        background-color: #fffc;
        transition: background-color 0s;
    }
</style>

<script>
    const {ipcRenderer} = require('electron');

    const keyboard = document.getElementById('keyboard');
    let keys;
    let keyProps;
    let config;
    ipcRenderer.on('config', (event, arg) => {
        config = arg;
        keys = config.keys;
        keyProps = [];
        console.log(keys);
        for (const keyCode of Object.keys(config.keyMap)) {
            let key = config.keyMap[keyCode];
            if (keyProps[key] == null) keyProps[key] = [];
            keyProps[key].push(keyCode);
        }

        keyboard.innerHTML = '';
        for (let i = 0; i < keys.length; i++) {
            const element = document.createElement('div');
            element.classList.add('key');
            element.innerText = keys[i];
            keyboard.appendChild(element);

            element.key = i;
            initDrag(element);

            keyProps[i].element = element;
        }

        keyboard.style.gridTemplateColumns = '80px';
        for (let i = 1; i < config.gridColumns; i++) {
            keyboard.style.gridTemplateColumns += ' 80px';
        }

        updateNavigation();
    });

    ipcRenderer.on('navigation', (event, arg) => {
        config.navigation = arg;
        updateNavigation();
    });

    ipcRenderer.on('key_press', (event, arg) => {
        let element = keyProps[arg].element;
        element.classList.add('pressed');
        window.requestAnimationFrame(() => window.requestAnimationFrame(() => element.classList.remove('pressed')))
    });

    ipcRenderer.send('keyboard', {type: 'request'});

    function updateNavigation() {
        for (let i = 0; i < keys.length; i++) {
            if (config.layouts[config.navigation[config.navigation.length - 1]].actions[keys[i]] != null) {
                keyProps[i].element.classList.add('action');
            } else {
                keyProps[i].element.classList.remove('action');
            }
        }
    }

    let draggedElement = null;

    function initDrag(element) {
        element.draggable = true;
        element.addEventListener('dragstart', () => {
            console.log('dragstart', element.key);
            element.classList.add('drag');
            draggedElement = element;
        });
        element.addEventListener('dragend', () => {
            console.log('dragend', element.key);
            element.classList.remove('drag');
        });

        element.addEventListener('dragenter', () => {
            console.log('dragenter', element.key);
            element.classList.add('dragover');
        });
        element.addEventListener('dragleave', () => {
            console.log('dragleave', element.key);
            element.classList.remove('dragover');
        });
        element.addEventListener('dragover', e => {
            e.preventDefault();
            e.dataTransfer.dropEffect = 'move';
            return false;
        });

        element.addEventListener('drop', e => {
            let key = element.key;
            console.log(key, draggedElement.key);
            let tmp = keys[key];
            keys[key] = keys[draggedElement.key];
            keys[draggedElement.key] = tmp;

            tmp = keyProps[key];
            keyProps[key] = keyProps[draggedElement.key];
            keyProps[draggedElement.key] = tmp;

            element.key = draggedElement.key;
            draggedElement.key = key;

            const el1 = element;
            const el2 = draggedElement;

            const next2 = el2.nextSibling;
            const parent2 = el2.parentElement;
            if (next2 === el1) {
                el2.parentElement.insertBefore(el1, el2);
            } else {
                el1.parentNode.insertBefore(el2, el1);
                if (next2) parent2.insertBefore(el1, next2);
                else parent2.appendChild(el1);
            }

            sendKeys();

            draggedElement = null;

            element.classList.remove('dragover')
            e.preventDefault();
            return false;
        });
    }

    function sendKeys() {
        console.log(keys);
        ipcRenderer.send('keyboard', {type: 'reorder', keys: keys});
    }
</script>